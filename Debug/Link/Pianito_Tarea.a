;/*
; * Pianito_Tarea.c
; *
; * Created: 13/03/2018 12:27:10 p. m.
; * Author: barby
; */
;
;#include <mega328p.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x01
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x0E
;PCODE: $00000004 VOL: 0
	.EQU __sm_adc_noise_red=0x02
;PCODE: $00000005 VOL: 0
	.EQU __sm_powerdown=0x04
;PCODE: $00000006 VOL: 0
	.EQU __sm_powersave=0x06
;PCODE: $00000007 VOL: 0
	.EQU __sm_standby=0x0C
;PCODE: $00000008 VOL: 0
	.EQU __sm_ext_standby=0x0E
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=smcr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;#include <io.h>
;
;unsigned long int msec=0,temp;

	.DSEG
;unsigned char i;
;
;float Frec[8]={261.3,293.6,329.6,349.2,391.9,440,493.8,523.2};
;unsigned char j; //Contador de notas almacenadas
;unsigned char Notas [100]; //Arreglo de notas
;unsigned char Tiempo [100]; //Tiempo de las notas
;
;// Timer2 output compare interrupt service routine
;interrupt [TIM2_COMPA] void timer2_compa_isr(void)
; 0000 0016 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0017   msec++;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 0018 }
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;
;void Tono (float Frecuencia)
; 0000 001B {
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 001C     float Cuentas;
; 0000 001D     unsigned int CuentasEnteras;
; 0000 001E 
; 0000 001F     TCCR1A=0x40;    //Salida en OC1A
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;	Frecuencia -> Y+6
;	Cuentas -> Y+2
;	CuentasEnteras -> R16,R17
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 0020     TCCR1B=0x09;    //Modo de CTC sin pre-escalador
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 0021 
; 0000 0022     Cuentas=500000.0/Frecuencia;
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 0023     CuentasEnteras=Cuentas;
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 0024         if((Cuentas-CuentasEnteras)>=0.5)
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0000 0025             CuentasEnteras++;
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 0026 
; 0000 0027         OCR1AH=(CuentasEnteras-1)/256;
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 0028         OCR1AL=(CuentasEnteras-1)%256;
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 0029 }
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;
;void noTono ()
; 0000 002C {
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 002D     TCCR1A=0;   //Desconecta
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 002E     PORTB.1=0;  //Apaga timer
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0000 002F     PORTB.1=0; //Si solo dejo PORTB.1=0; el programa no me hará caso porque este regitro tienen un 40 (ese pin es toggle ...
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 0030 }
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;
;void main(void)
; 0000 0033 {
;PCODE: $0000004C VOL: 0
; 0000 0034     PORTD=0xFF; //Pull-up de PD0 a PD7 switches
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 0035     DDRB.1=1; //PB1 de salida
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 0036 
; 0000 0037     TCCR2A=0x02;
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 0038     TCCR2B=0x02;
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 0039     OCR2A=124;
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 003A     TIMSK2=0x02;
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 003B     #asm("sei")
;PCODE: $00000059 VOL: 0
; 0000 003C     j=0;
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 003D 
; 0000 003E 
; 0000 003F while (1)
;PCODE: $0000005C VOL: 0
; 0000 0040     {
; 0000 0041         for (i=0; i<8;i++)
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 0042         {
; 0000 0043             if(((PIND>>i)&0x01)==0)   //PIND.i==0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0000 0044             {
; 0000 0045                 //Aquí no pongo los delay porque tardaré en hacerle caso al usuario
; 0000 0046                 Tono(Frec[0]);
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 0047                 delay_ms(30);
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 0048                 Notas[j]=i;
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0000 0049                 temp=msec;
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0000 004A                 while(((PIND>>i)&0x01)==0); //Esperar hasta que deja de presionar
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0000 004B                 Tiempo[j]=msec-temp;
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0000 004C                 noTono();
;PCODE: $0000008D VOL: 0
; 0000 004D                 //Aquí pongo el delay ¡Woohoo!
; 0000 004E                 delay_ms(10);
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0000 004F                 j++;
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0000 0050             }
; 0000 0051 
; 0000 0052          }
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
; 0000 0053 
; 0000 0054          //Revisar botón de clear (si está presionado: borro  j=0;)
; 0000 0055          //Revisar el botón de PLAY (Si está presionado reproducir canción)
; 0000 0056          //de k=0 a j-1
; 0000 0057     }
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0000 0058 }
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
